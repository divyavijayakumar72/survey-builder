{
  "version": 3,
  "sources": ["../bundle-Gr4W9s/checked-fetch.js", "../../../worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Gr4W9s/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-Gr4W9s/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\CURSOR PROJECTS\\MessageEverywhere\\survey-builder\\.wrangler\\tmp\\dev-TLqWp3",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Cloudflare Worker for Survey API using D1\r\n// Bind D1 as 'DB' in wrangler.toml\r\n\r\n/**\r\n * D1 Schema (run this in your migration):\r\n *\r\n * CREATE TABLE IF NOT EXISTS surveys (\r\n *   id TEXT PRIMARY KEY,\r\n *   title TEXT NOT NULL,\r\n *   questions TEXT NOT NULL, -- JSON string\r\n *   createdAt TEXT NOT NULL,\r\n *   updatedAt TEXT,\r\n *   submitted INTEGER DEFAULT 0,\r\n *   submittedAt TEXT\r\n * );\r\n *\r\n * CREATE TABLE IF NOT EXISTS survey_responses (\r\n *   id TEXT PRIMARY KEY,\r\n *   surveyId TEXT NOT NULL,\r\n *   respondentName TEXT NOT NULL,\r\n *   responses TEXT NOT NULL, -- JSON string\r\n *   submittedAt TEXT NOT NULL,\r\n *   FOREIGN KEY (surveyId) REFERENCES surveys(id) ON DELETE CASCADE\r\n * );\r\n */\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const method = request.method.toUpperCase();\r\n    const DB = env.DB;\r\n\r\n    // CORS headers\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, PATCH, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type',\r\n    };\r\n\r\n    // Handle preflight OPTIONS requests\r\n    if (method === 'OPTIONS') {\r\n      return new Response(null, {\r\n        status: 204,\r\n        headers: corsHeaders,\r\n      });\r\n    }\r\n\r\n    // Helper: parse request body\r\n    async function parseBody(req) {\r\n      try {\r\n        return await req.json();\r\n      } catch {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Validation logic (ported from server.js)\r\n    function validateSurvey(survey) {\r\n      if (!survey.title || typeof survey.title !== 'string' || survey.title.trim() === '') {\r\n        return { valid: false, message: 'Survey title is required and must be a non-empty string' };\r\n      }\r\n      if (!survey.questions || !Array.isArray(survey.questions)) {\r\n        return { valid: false, message: 'Questions must be an array' };\r\n      }\r\n      if (survey.questions.length === 0) {\r\n        return { valid: false, message: 'Survey must have at least one question' };\r\n      }\r\n      for (let i = 0; i < survey.questions.length; i++) {\r\n        const question = survey.questions[i];\r\n        if (!question.questionText || typeof question.questionText !== 'string' || question.questionText.trim() === '') {\r\n          return { valid: false, message: `Question ${i + 1} must have a non-empty questionText` };\r\n        }\r\n        if (!question.type || !['multiple-choice', 'single-select', 'free-text'].includes(question.type)) {\r\n          return { valid: false, message: `Question ${i + 1} must have a valid type (multiple-choice, single-select, or free-text)` };\r\n        }\r\n        if (question.type !== 'free-text') {\r\n          if (!question.options || !Array.isArray(question.options)) {\r\n            return { valid: false, message: `Question ${i + 1} must have an options array for choice-based questions` };\r\n          }\r\n          if (question.options.length < 2) {\r\n            return { valid: false, message: `Question ${i + 1} must have at least 2 options for choice-based questions` };\r\n          }\r\n          for (let j = 0; j < question.options.length; j++) {\r\n            if (!question.options[j] || typeof question.options[j] !== 'string' || question.options[j].trim() === '') {\r\n              return { valid: false, message: `Question ${i + 1}, Option ${j + 1} must have non-empty text` };\r\n            }\r\n          }\r\n        }\r\n        if (typeof question.required !== 'boolean') {\r\n          return { valid: false, message: `Question ${i + 1} must have a boolean required field` };\r\n        }\r\n      }\r\n      return { valid: true };\r\n    }\r\n\r\n    // Helper: send JSON response with CORS headers\r\n    function json(data, status = 200) {\r\n      return new Response(JSON.stringify(data), {\r\n        status,\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders,\r\n        },\r\n      });\r\n    }\r\n\r\n    // Routing\r\n    // Health check\r\n    if (method === 'GET' && pathname === '/api/health') {\r\n      return json({\r\n        success: true,\r\n        message: 'Server is running',\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n\r\n    // GET /test-db - List all tables in the database\r\n    if (method === 'GET' && pathname === '/test-db') {\r\n      try {\r\n        const { results } = await DB.prepare(\"SELECT name FROM sqlite_master WHERE type='table'\").all();\r\n        const tableNames = results.map(row => row.name);\r\n        \r\n        // Check if survey_responses table exists and has data\r\n        let responseCount = 0;\r\n        let surveyCount = 0;\r\n        \r\n        if (tableNames.includes('survey_responses')) {\r\n          const responseResult = await DB.prepare(\"SELECT COUNT(*) as count FROM survey_responses\").all();\r\n          responseCount = responseResult.results[0].count;\r\n        }\r\n        \r\n        if (tableNames.includes('surveys')) {\r\n          const surveyResult = await DB.prepare(\"SELECT COUNT(*) as count FROM surveys\").all();\r\n          surveyCount = surveyResult.results[0].count;\r\n        }\r\n        \r\n        return json({\r\n          success: true,\r\n          message: 'Database tables retrieved successfully',\r\n          data: {\r\n            tables: tableNames,\r\n            count: tableNames.length,\r\n            survey_responses_count: responseCount,\r\n            surveys_count: surveyCount,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        return json({ \r\n          success: false, \r\n          message: 'Internal server error while retrieving database tables',\r\n          error: error.message \r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    // POST /test-add-responses - Add sample responses for testing\r\n    if (method === 'POST' && pathname === '/test-add-responses') {\r\n      try {\r\n        // Get the first survey to add responses to\r\n        const { results: surveys } = await DB.prepare('SELECT id, title FROM surveys LIMIT 1').all();\r\n        \r\n        if (!surveys.length) {\r\n          return json({ success: false, message: 'No surveys found to add responses to' }, 404);\r\n        }\r\n        \r\n        const surveyId = surveys[0].id;\r\n        const surveyTitle = surveys[0].title;\r\n        \r\n        // Add 3 sample responses\r\n        const sampleResponses = [\r\n          {\r\n            respondentName: 'John Doe',\r\n            responses: [\r\n              { questionId: 0, answer: 'Sample answer 1' },\r\n              { questionId: 1, answer: 'Sample answer 2' }\r\n            ]\r\n          },\r\n          {\r\n            respondentName: 'Jane Smith',\r\n            responses: [\r\n              { questionId: 0, answer: 'Another answer 1' },\r\n              { questionId: 1, answer: 'Another answer 2' }\r\n            ]\r\n          },\r\n          {\r\n            respondentName: 'Bob Johnson',\r\n            responses: [\r\n              { questionId: 0, answer: 'Third answer 1' },\r\n              { questionId: 1, answer: 'Third answer 2' }\r\n            ]\r\n          }\r\n        ];\r\n        \r\n        for (const response of sampleResponses) {\r\n          const responseId = Date.now().toString() + Math.random().toString(36).substr(2, 9);\r\n          const now = new Date().toISOString();\r\n          \r\n          await DB.prepare(\r\n            'INSERT INTO survey_responses (id, surveyId, respondentName, responses, submittedAt) VALUES (?, ?, ?, ?, ?)'\r\n          ).bind(\r\n            responseId,\r\n            surveyId,\r\n            response.respondentName,\r\n            JSON.stringify(response.responses),\r\n            now\r\n          ).run();\r\n        }\r\n        \r\n        return json({\r\n          success: true,\r\n          message: 'Sample responses added successfully',\r\n          data: {\r\n            surveyId,\r\n            surveyTitle,\r\n            responsesAdded: sampleResponses.length,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error('Error adding sample responses:', error);\r\n        return json({ \r\n          success: false, \r\n          message: 'Internal server error while adding sample responses',\r\n          error: error.message \r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    // GET /api/surveys\r\n    if (method === 'GET' && pathname === '/api/surveys') {\r\n      try {\r\n        console.log('Fetching surveys with response counts...');\r\n        \r\n        const { results } = await DB.prepare(`\r\n          SELECT \r\n            s.id, \r\n            s.title, \r\n            s.questions, \r\n            s.createdAt, \r\n            s.updatedAt, \r\n            s.submitted,\r\n            COALESCE(r.responseCount, 0) as responseCount\r\n          FROM surveys s\r\n          LEFT JOIN (\r\n            SELECT surveyId, COUNT(*) as responseCount\r\n            FROM survey_responses\r\n            GROUP BY surveyId\r\n          ) r ON s.id = r.surveyId\r\n        `).all();\r\n        \r\n        console.log('Survey results:', results.map(s => ({\r\n          id: s.id,\r\n          title: s.title,\r\n          responseCount: s.responseCount\r\n        })));\r\n        \r\n        return json({\r\n          success: true,\r\n          message: 'Surveys retrieved successfully',\r\n          data: {\r\n            surveys: results.map(s => ({\r\n              id: s.id,\r\n              title: s.title,\r\n              questionCount: JSON.parse(s.questions).length,\r\n              responseCount: s.responseCount,\r\n              createdAt: s.createdAt,\r\n              updatedAt: s.updatedAt || s.createdAt,\r\n              submitted: !!s.submitted,\r\n            })),\r\n            total: results.length,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching surveys:', error);\r\n        return json({ success: false, message: 'Internal server error while retrieving surveys' }, 500);\r\n      }\r\n    }\r\n\r\n    // GET /api/surveys/:id\r\n    const surveyIdMatch = pathname.match(/^\\/api\\/surveys\\/([^\\/]+)$/);\r\n    if (method === 'GET' && surveyIdMatch) {\r\n      const surveyId = surveyIdMatch[1];\r\n      try {\r\n        const { results } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(surveyId).all();\r\n        if (!results.length) {\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        const survey = results[0];\r\n        survey.questions = JSON.parse(survey.questions);\r\n        survey.submitted = !!survey.submitted;\r\n        return json({\r\n          success: true,\r\n          message: 'Survey retrieved successfully',\r\n          data: survey,\r\n        });\r\n      } catch (error) {\r\n        return json({ success: false, message: 'Internal server error while retrieving survey' }, 500);\r\n      }\r\n    }\r\n\r\n    // POST /api/surveys\r\n    if (method === 'POST' && pathname === '/api/surveys') {\r\n      try {\r\n        const surveyData = await parseBody(request);\r\n        const validation = validateSurvey(surveyData);\r\n        if (!validation.valid) {\r\n          return json({ success: false, message: validation.message }, 400);\r\n        }\r\n        const id = Date.now().toString();\r\n        const now = new Date().toISOString();\r\n        const questions = surveyData.questions.map(q => ({\r\n          questionText: q.questionText.trim(),\r\n          type: q.type,\r\n          options: q.type === 'free-text' ? [] : q.options.map(opt => opt.trim()),\r\n          required: q.required,\r\n        }));\r\n        await DB.prepare(\r\n          'INSERT INTO surveys (id, title, questions, createdAt, submitted) VALUES (?, ?, ?, ?, 0)'\r\n        ).bind(id, surveyData.title.trim(), JSON.stringify(questions), now).run();\r\n        return json({\r\n          success: true,\r\n          message: 'Survey created successfully',\r\n          data: {\r\n            id,\r\n            title: surveyData.title.trim(),\r\n            questionCount: questions.length,\r\n          },\r\n        }, 201);\r\n      } catch (error) {\r\n        return json({ success: false, message: 'Internal server error while creating survey' }, 500);\r\n      }\r\n    }\r\n\r\n    // POST /api/surveys/:id/submit\r\n    const submitMatch = pathname.match(/^\\/api\\/surveys\\/([^\\/]+)\\/submit$/);\r\n    if (method === 'POST' && submitMatch) {\r\n      const surveyId = submitMatch[1];\r\n      try {\r\n        const { results } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(surveyId).all();\r\n        if (!results.length) {\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        await DB.prepare('UPDATE surveys SET submitted = 1, submittedAt = ? WHERE id = ?')\r\n          .bind(new Date().toISOString(), surveyId)\r\n          .run();\r\n        return json({\r\n          success: true,\r\n          message: 'Survey marked as submitted successfully',\r\n          data: { id: surveyId, submitted: true },\r\n        });\r\n      } catch (error) {\r\n        return json({ success: false, message: 'Internal server error while submitting survey' }, 500);\r\n      }\r\n    }\r\n\r\n    // PUT /api/surveys/:id\r\n    if (method === 'PUT' && surveyIdMatch) {\r\n      const surveyId = surveyIdMatch[1];\r\n      try {\r\n        const surveyData = await parseBody(request);\r\n        const { results } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(surveyId).all();\r\n        if (!results.length) {\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        const validation = validateSurvey(surveyData);\r\n        if (!validation.valid) {\r\n          return json({ success: false, message: validation.message }, 400);\r\n        }\r\n        const questions = surveyData.questions.map(q => ({\r\n          questionText: q.questionText.trim(),\r\n          type: q.type,\r\n          options: q.type === 'free-text' ? [] : q.options.map(opt => opt.trim()),\r\n          required: q.required,\r\n        }));\r\n        await DB.prepare(\r\n          'UPDATE surveys SET title = ?, questions = ?, updatedAt = ?, submitted = submitted WHERE id = ?'\r\n        ).bind(\r\n          surveyData.title.trim(),\r\n          JSON.stringify(questions),\r\n          new Date().toISOString(),\r\n          surveyId\r\n        ).run();\r\n        return json({\r\n          success: true,\r\n          message: 'Survey updated successfully',\r\n          data: {\r\n            id: surveyId,\r\n            title: surveyData.title.trim(),\r\n            questionCount: questions.length,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        return json({ success: false, message: 'Internal server error while updating survey' }, 500);\r\n      }\r\n    }\r\n\r\n    // PATCH /api/surveys/:id/status - Update survey published status only\r\n    const statusMatch = pathname.match(/^\\/api\\/surveys\\/([^\\/]+)\\/status$/);\r\n    if (method === 'PATCH' && statusMatch) {\r\n      const surveyId = statusMatch[1];\r\n      try {\r\n        const statusData = await parseBody(request);\r\n        \r\n        // Validate request body\r\n        if (!statusData) {\r\n          return json({ success: false, message: 'Request body is required' }, 400);\r\n        }\r\n        \r\n        if (typeof statusData.published !== 'boolean') {\r\n          return json({ success: false, message: 'published field must be a boolean value' }, 400);\r\n        }\r\n        \r\n        // Check if survey exists\r\n        const { results } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(surveyId).all();\r\n        if (!results.length) {\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        \r\n        // Update only the submitted field\r\n        await DB.prepare(\r\n          'UPDATE surveys SET submitted = ?, updatedAt = ? WHERE id = ?'\r\n        ).bind(\r\n          statusData.published ? 1 : 0,\r\n          new Date().toISOString(),\r\n          surveyId\r\n        ).run();\r\n        \r\n        return json({\r\n          success: true,\r\n          message: `Survey ${statusData.published ? 'published' : 'unpublished'} successfully`,\r\n          data: {\r\n            id: surveyId,\r\n            published: statusData.published\r\n          },\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating survey status:', error);\r\n        return json({ success: false, message: 'Internal server error while updating survey status' }, 500);\r\n      }\r\n    }\r\n\r\n    // DELETE /api/surveys/:id\r\n    if (method === 'DELETE' && surveyIdMatch) {\r\n      const surveyId = surveyIdMatch[1];\r\n      try {\r\n        const { results } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(surveyId).all();\r\n        if (!results.length) {\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        await DB.prepare('DELETE FROM surveys WHERE id = ?').bind(surveyId).run();\r\n        return json({\r\n          success: true,\r\n          message: 'Survey deleted successfully',\r\n          data: {\r\n            id: surveyId,\r\n            title: results[0].title,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        return json({ success: false, message: 'Internal server error while deleting survey' }, 500);\r\n      }\r\n    }\r\n\r\n    // POST /api/surveys/responses - Submit a survey response\r\n    if (method === 'POST' && pathname === '/api/surveys/responses') {\r\n      try {\r\n        console.log('Received survey response submission request');\r\n        \r\n        const responseData = await parseBody(request);\r\n        console.log('Parsed request body:', responseData);\r\n        \r\n        // Validate required fields\r\n        if (!responseData) {\r\n          console.error('No request body provided');\r\n          return json({ success: false, message: 'Request body is required' }, 400);\r\n        }\r\n        \r\n        if (!responseData.surveyId) {\r\n          console.error('Missing surveyId');\r\n          return json({ success: false, message: 'surveyId is required' }, 400);\r\n        }\r\n        \r\n        if (!responseData.respondentName || responseData.respondentName.trim() === '') {\r\n          console.error('Missing or empty respondentName');\r\n          return json({ success: false, message: 'respondentName is required' }, 400);\r\n        }\r\n        \r\n        if (!responseData.responses || !Array.isArray(responseData.responses)) {\r\n          console.error('Missing or invalid responses array');\r\n          return json({ success: false, message: 'responses array is required' }, 400);\r\n        }\r\n        \r\n        // Verify survey exists\r\n        console.log('Checking if survey exists:', responseData.surveyId);\r\n        const { results: surveyResults } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(responseData.surveyId).all();\r\n        \r\n        if (!surveyResults.length) {\r\n          console.error('Survey not found:', responseData.surveyId);\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        \r\n        console.log('Survey found, creating response record');\r\n        \r\n        const responseId = Date.now().toString();\r\n        const now = new Date().toISOString();\r\n        \r\n        const insertResult = await DB.prepare(\r\n          'INSERT INTO survey_responses (id, surveyId, respondentName, responses, submittedAt) VALUES (?, ?, ?, ?, ?)'\r\n        ).bind(\r\n          responseId,\r\n          responseData.surveyId,\r\n          responseData.respondentName.trim(),\r\n          JSON.stringify(responseData.responses),\r\n          now\r\n        ).run();\r\n        \r\n        console.log('Response inserted successfully:', insertResult);\r\n        \r\n        return json({\r\n          success: true,\r\n          message: 'Survey response submitted successfully',\r\n          data: {\r\n            id: responseId,\r\n            surveyId: responseData.surveyId,\r\n            respondentName: responseData.respondentName,\r\n            submittedAt: now,\r\n          },\r\n        }, 201);\r\n      } catch (error) {\r\n        console.error('Error submitting survey response:', error);\r\n        return json({ \r\n          success: false, \r\n          message: 'Internal server error while submitting response',\r\n          error: error.message \r\n        }, 500);\r\n      }\r\n    }\r\n\r\n    // GET /api/surveys/:id/responses - Get responses for a survey\r\n    const responsesMatch = pathname.match(/^\\/api\\/surveys\\/([^\\/]+)\\/responses$/);\r\n    if (method === 'GET' && responsesMatch) {\r\n      const surveyId = responsesMatch[1];\r\n      try {\r\n        // Verify survey exists\r\n        const { results: surveyResults } = await DB.prepare('SELECT * FROM surveys WHERE id = ?').bind(surveyId).all();\r\n        if (!surveyResults.length) {\r\n          return json({ success: false, message: 'Survey not found' }, 404);\r\n        }\r\n        \r\n        const { results } = await DB.prepare('SELECT * FROM survey_responses WHERE surveyId = ? ORDER BY submittedAt DESC').bind(surveyId).all();\r\n        \r\n        const responses = results.map(r => ({\r\n          id: r.id,\r\n          surveyId: r.surveyId,\r\n          respondentName: r.respondentName,\r\n          responses: JSON.parse(r.responses),\r\n          submittedAt: r.submittedAt,\r\n        }));\r\n        \r\n        return json({\r\n          success: true,\r\n          message: 'Survey responses retrieved successfully',\r\n          data: {\r\n            surveyId,\r\n            responses,\r\n            total: responses.length,\r\n          },\r\n        });\r\n      } catch (error) {\r\n        return json({ success: false, message: 'Internal server error while retrieving responses' }, 500);\r\n      }\r\n    }\r\n\r\n    // Not found\r\n    return json({ success: false, message: 'Not found' }, 404);\r\n  },\r\n}; ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\.wrangler\\\\tmp\\\\bundle-Gr4W9s\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\.wrangler\\\\tmp\\\\bundle-Gr4W9s\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\CURSOR PROJECTS\\\\MessageEverywhere\\\\survey-builder\\\\.wrangler\\\\tmp\\\\bundle-Gr4W9s\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
